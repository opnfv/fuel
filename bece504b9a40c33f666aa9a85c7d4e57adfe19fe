{
  "comments": [
    {
      "key": {
        "uuid": "9a91bd0f_74ca04a3",
        "filename": "build/Makefile",
        "patchSetId": 1
      },
      "lineNbr": 85,
      "author": {
        "id": 403
      },
      "writtenOn": "2016-05-11T13:02:10Z",
      "side": 1,
      "message": "A question if you are using . as the seperator above, will you not end up with a 3 element array?  [0]\u003d3. [1]\u003d1. [2]\u003d9 and thus your second check in the OR \"-lt 19\" will that work?  Or does the seperator only do the first delimiter \".\"?",
      "revId": "bece504b9a40c33f666aa9a85c7d4e57adfe19fe",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9a91bd0f_f4bdb403",
        "filename": "build/Makefile",
        "patchSetId": 1
      },
      "lineNbr": 85,
      "author": {
        "id": 652
      },
      "writtenOn": "2016-05-11T13:06:15Z",
      "side": 1,
      "message": "You have right it will be array of 3 elements, but we check if current kernel is newer than 3.19.something there is no dot between 1 and 9.",
      "parentUuid": "9a91bd0f_74ca04a3",
      "revId": "bece504b9a40c33f666aa9a85c7d4e57adfe19fe",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9a91bd0f_b4372cb0",
        "filename": "build/Makefile",
        "patchSetId": 1
      },
      "lineNbr": 85,
      "author": {
        "id": 403
      },
      "writtenOn": "2016-05-11T13:08:15Z",
      "side": 1,
      "message": "Also - why not just do simple \"float\" comparison?  cast them to floats and then use \u003c\u003e \n\n(static)min_ver\u003d4.0\nKERNEL_VER\u003d$${uname -r);\nfloat_kerver \u003d float(KERNEL_VER)\n\n\nif float_kerver \u003c min_ver then\n\n\nperhaps a bit more python - but you are donig number comparison, why use string operator",
      "parentUuid": "9a91bd0f_74ca04a3",
      "revId": "bece504b9a40c33f666aa9a85c7d4e57adfe19fe",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9a91bd0f_145298dd",
        "filename": "build/Makefile",
        "patchSetId": 1
      },
      "lineNbr": 85,
      "author": {
        "id": 403
      },
      "writtenOn": "2016-05-11T13:15:45Z",
      "side": 1,
      "message": "I think this would do it and then you make the \"min kernel versino\" a static-top level variable\n\n#!/bin/bash\n\nmin_ver\u003d6.0\nker_ver\u003d`uname -r`\nif ! echo \"$min_ver $ker_ver -p\" | dc | grep \u003e /dev/null ^-; then\n  echo \"$min_ver \u003e $ker_ver\"\nelse\n  echo \"$min_ver \u003c $ker_ver\"\nfi\n~",
      "parentUuid": "9a91bd0f_b4372cb0",
      "revId": "bece504b9a40c33f666aa9a85c7d4e57adfe19fe",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9a91bd0f_d463d0af",
        "filename": "build/Makefile",
        "patchSetId": 1
      },
      "lineNbr": 85,
      "author": {
        "id": 403
      },
      "writtenOn": "2016-05-11T13:18:03Z",
      "side": 1,
      "message": "hey there..but you arent checking .19, you are check again .1 - cause .19 doesnt exist in the second element - only a 1 so if you got a kernel that was 3.18 and you checked you are going to have equivalency noy? cause you would have .18 being bigger than .1 [1]?   Just wondering if you wont have to change this alot.. you know better than me :)",
      "parentUuid": "9a91bd0f_f4bdb403",
      "revId": "bece504b9a40c33f666aa9a85c7d4e57adfe19fe",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9a91bd0f_945d48ec",
        "filename": "build/Makefile",
        "patchSetId": 1
      },
      "lineNbr": 85,
      "author": {
        "id": 652
      },
      "writtenOn": "2016-05-11T13:19:49Z",
      "side": 1,
      "message": "This approach would require define new function float to casting string \"4.2.0-35-generic\" to number representation, since as far as I know bash do not have this build in. I tried to keep one-liner spirit here ;)",
      "parentUuid": "9a91bd0f_b4372cb0",
      "revId": "bece504b9a40c33f666aa9a85c7d4e57adfe19fe",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    }
  ]
}