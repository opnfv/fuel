#!/bin/bash -e
##############################################################################
# Copyright (c) 2017 Mirantis Inc., Enea AB and others.
# All rights reserved. This program and the accompanying materials
# are made available under the terms of the Apache License, Version 2.0
# which accompanies this distribution, and is available at
# http://www.apache.org/licenses/LICENSE-2.0
##############################################################################

CI_DEBUG=${CI_DEBUG:-0}; [[ "${CI_DEBUG}" =~ (false|0) ]] || set -x

# shellcheck disable=SC1090
source "$(dirname "${BASH_SOURCE[0]}")/../../scripts/lib.sh"

# Wait for MaaS commissioning/deploy to finish, retry on failure
function maas_fixup() {
  local statuscmd="salt 'mas01*' --out yaml state.apply maas.machines.status"
  # shellcheck disable=SC2155
  local ncount=$(salt --out yaml 'mas01*' pillar.get maas:region:machines | \
    grep -cE '^\s{2}\w+:$')
  wait_for 180 "${statuscmd} | tee /dev/stderr | " \
    "grep -Eq '((Deployed|Ready): ${ncount}|status:Failed|status:Allocated)'"
  # shellcheck disable=SC2155
  local statusout=$(eval "${statuscmd}")

  # shellcheck disable=SC2155
  local fcnodes=$(echo "${statusout}" | \
    grep -Po '(?<=system_id:)(.*)(?=,status:Failed commissioning)')
  for node_system_id in ${fcnodes}; do
    salt -C 'mas01*' state.apply maas.machines.delete \
      pillar="{'system_id': '${node_system_id}'}"
    sleep 30
  done
  if [ -n "${fcnodes}" ]; then
    salt -C 'mas01*' state.apply maas.machines
    return 1
  fi

  # shellcheck disable=SC2155
  local fdnodes=$(echo "${statusout}" | \
    grep -Po '(?<=system_id:)(.*)(?=,status:(Failed deployment|Allocated))')
  for node_system_id in ${fdnodes}; do
    salt -C 'mas01*' state.apply maas.machines.mark_broken_fixed \
      pillar="{'system_id': '${node_system_id}'}"
    sleep 30
  done
  if [ -n "${fdnodes}" ]; then
    salt -C 'mas01*' state.apply maas.machines.deploy
    return 1
  fi

  return 0
}

# MaaS rack/region controller, node commissioning
salt -C 'mas01*' cmd.run "add-apt-repository ppa:maas/stable"

salt -C 'mas01*' state.apply linux,salt,openssh,ntp
salt -C 'mas01*' state.apply linux.network.interface
salt -C 'mas01*' state.apply maas.pxe_nat
salt -C 'mas01*' state.apply maas.cluster
salt -C 'cfg01*' state.apply maas.pxe_route

wait_for 10 "salt -C 'mas01*' state.apply maas.region"

salt -C 'mas01*' state.apply maas.machines
wait_for 10 maas_fixup

# cleanup outdated salt keys
salt-key --out yaml | awk '!/^(minions|- cfg01|- mas01)/ {print $2}' | \
  xargs -I{} salt-key -yd {}

# MaaS node deployment
salt -C 'mas01*' state.apply maas.machines.deploy
wait_for 10 maas_fixup

salt -C 'mas01*' pillar.item\
  maas:region:admin:username \
  maas:region:admin:password

salt -C '* and not cfg01* and not mas01*' saltutil.sync_all
