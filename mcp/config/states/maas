#!/bin/bash -e
# shellcheck disable=SC1090,SC2155
##############################################################################
# Copyright (c) 2017 Mirantis Inc., Enea AB and others.
# All rights reserved. This program and the accompanying materials
# are made available under the terms of the Apache License, Version 2.0
# which accompanies this distribution, and is available at
# http://www.apache.org/licenses/LICENSE-2.0
##############################################################################

CI_DEBUG=${CI_DEBUG:-0}; [[ "${CI_DEBUG}" =~ (false|0) ]] || set -x
ERASE_ENV=${ERASE_ENV:-0}

source "$(dirname "${BASH_SOURCE[0]}")/../../scripts/globals.sh"
source "$(dirname "${BASH_SOURCE[0]}")/../../scripts/lib.sh"

bm_nodes=$(salt --out yaml 'mas01*' pillar.get maas:region:machines | \
           awk '/^\s+\w+[[:digit:]]+:$/ {gsub(/:$/, "*"); printf "%s ", $1}')


# Wait for MaaS commissioning/deploy to finish, retry on failure
function maas_fixup() {
  # check status
  local statuscmd="salt 'mas01*' --out yaml state.apply maas.machines.status"
  local statusout=$(eval "${statuscmd}")

  # for 'Failed commissioning' nodes, delete them
  # for 'Failed testing' nodes, override them
  # then redo machines state and wait for ready
  local fcnodes=$(echo "${statusout}" | \
    grep -Pzo 'status: Failed commissioning\n\s+system_id: \K.+\n')
  local ftnodes=$(echo "${statusout}" | \
    grep -Pzo 'status: Failed testing\n\s+system_id: \K.+\n')

  for node_system_id in ${fcnodes}; do
    salt -C 'mas01*' state.apply maas.machines.delete \
      pillar="{'system_id': '${node_system_id}'}"
    sleep 10
  done

  for node_system_id in ${ftnodes}; do
    salt -C 'mas01*' state.apply maas.machines.override_failed_testing \
      pillar="{'system_id': '${node_system_id}'}"
    sleep 10
  done

  if [ -n "${fcnodes}" ] || [ -n "${ftnodes}" ]; then
    salt -C 'mas01*' state.apply maas.machines
    salt -C 'mas01*' state.apply maas.machines.wait_for_machines_ready
    return 1
  fi

  # for 'Failed deployment' nodes, mark-broken/fixed
  local fdnodes=$(echo "${statusout}" | \
    grep -Pzo 'status: (Failed deployment|Allocated)\n\s+system_id: \K.+\n')
  if [ -n "${fdnodes}" ]; then
    for node_system_id in ${fdnodes}; do
      salt -C 'mas01*' state.apply maas.machines.mark_broken_fixed \
        pillar="{'system_id': '${node_system_id}'}"
      sleep 10
    done
    return 1
  fi

  # for 'Commissioning/Testing' nodes, wait for ready
  local ctnodes=$(echo "${statusout}" | \
    grep -Pzo 'status: (Commissioning|Testing)\n\s+system_id: \K.+\n')
  if [ -n "${ctnodes}" ]; then
    salt -C 'mas01*' state.apply maas.machines.wait_for_machines_ready
    return 1
  fi

  # for 'Ready' nodes
  # allocate storage for cmp nodes
  # deploy them all and wait for deployed
  local rnodes=$(echo "${statusout}" | \
    grep -Pzo 'status: Ready\n\s+system_id: \K.+\n')
  if [ -n "${rnodes}" ]; then
    salt -C 'mas01*' state.apply maas.machines.storage
    salt -C 'mas01*' state.apply maas.machines.deploy
    salt -C 'mas01*' state.apply maas.machines.wait_for_machines_deployed
    return 1
  fi

  # for 'Deploying' nodes, wait for deployed
  local dnodes=$(echo "${statusout}" | \
    grep -Pzo 'status: Deploying\n\s+system_id: \K.+\n')
  if [ -n "${dnodes}" ]; then
    salt -C 'mas01*' state.apply maas.machines.wait_for_machines_deployed
    return 1
  fi

  return 0
}

# Optionally destroy MaaS machines from a previous run
if [ "${ERASE_ENV}" -gt 1 ]; then
  set +e; dnodes=$(salt 'mas01*' --out yaml state.apply maas.machines.status | \
    grep -Pzo '\s+system_id: \K.+\n'); set -e
  cleanup_uefi
  for node_system_id in ${dnodes}; do
    salt -C 'mas01*' state.apply maas.machines.delete \
      pillar="{'system_id': '${node_system_id}'}"
    sleep 10
  done
fi

# MaaS rack/region controller, node commissioning
salt -C 'mas01*' state.apply linux,salt,openssh,ntp
salt -C 'mas01*' state.apply maas.pxe_nat
salt -C 'mas01*' state.apply maas.cluster

wait_for 10 "salt -C 'mas01*' state.apply maas.region"

if [ -n "${bm_nodes}" ]; then
  salt -C 'mas01*' state.apply maas.machines
fi

# cleanup outdated salt keys
salt-key --out yaml | awk '!/^(minions|- cfg01|- mas01)/ {print $2}' | \
  xargs --no-run-if-empty -I{} salt-key -yd {}

# MaaS node deployment, max 10 attmpts
wait_for 10 maas_fixup

salt -C 'mas01*' pillar.item\
  maas:region:admin:username \
  maas:region:admin:password

# Check all baremetal nodes are available
wait_for 5.0 "(for n in ${bm_nodes}; do salt \${n} test.ping 2>/dev/null || exit; done)"

wait_for 10.0 "salt -C '* and not cfg01* and not mas01*' saltutil.sync_all"
