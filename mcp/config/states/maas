#!/bin/bash
function wait_for() {
  local cmdstr=$@
  local total_attempts=360
  local sleep_time=10
  local attempt=1
  echo "[NOTE] Waiting for cmd to return success: ${cmdstr}"
  while ((attempt <= total_attempts)); do
    eval "${cmdstr}" && break || true
    echo -n '.'; sleep "${sleep_time}"
    ((attempt+=1))
  done
}

# MaaS rack/region controller, node commissioning
salt -C 'mas01*' cmd.run "add-apt-repository ppa:maas/stable"

salt -C 'mas01*' state.apply linux,salt,openssh,ntp
salt -C 'mas01*' state.apply linux.network.interface
salt -C 'mas01*' state.apply maas.pxe_nat
salt -C 'mas01*' state.apply maas.cluster
salt -C 'cfg01*' cmd.run \
  "route add -net 192.168.11.0/24 gw ${MAAS_IP:-192.168.10.3}"

wait_for "salt -C 'mas01*' state.apply maas.region"

salt -C 'mas01*' state.apply maas.machines
# TODO: relax cond, as this is not re-entrant (e.g. nodes already deployed)
wait_for "salt 'mas01*' --out yaml state.apply maas.machines.status | " \
         "tee /dev/stderr | fgrep -q 'Ready: 5'"

# cleanup outdated salt keys
salt-key --out yaml | awk '!/^(minions|- cfg01|- mas01)/ {print $2}' | xargs -I{} salt-key -yd {}

# MaaS node deployment
salt -C 'mas01*' state.apply maas.machines.deploy
wait_for "salt 'mas01*' --out yaml state.apply maas.machines.status | " \
         "tee /dev/stderr | fgrep -q 'Deployed: 5'"

salt -C 'mas01*' pillar.item\
  maas:region:admin:username \
  maas:region:admin:password

# KVM, compute node prereqs (libvirt first), VCP deployment
salt -C '* and not cfg01* and not mas01*' saltutil.sync_all

salt -C 'kvm*' pkg.install bridge-utils
salt -C 'kvm*' state.apply linux.network
salt -C 'kvm*' system.reboot
wait_for "! salt '*' test.ping | tee /dev/stderr | fgrep -q 'Not connected'"

salt -C '* and not cfg01* and not mas01*' state.apply linux,ntp

salt -C 'kvm*' state.sls libvirt

salt -C '* and not cfg01* and not mas01*' state.apply salt
salt -C 'kvm*' state.sls salt.control

vcp_nodes=$(salt --out yaml 'kvm01*' pillar.get salt:control:cluster:internal:node | awk '/\s+\w+:$/ {gsub(/:$/, "*"); print $1}')

# Check all vcp nodes are available
rc=1
while [ $rc -ne 0 ]; do
  rc=0
  for node in $vcp_nodes; do
    salt "$node" test.ping 2>/dev/null 1>&2 || { rc=$?; break; };
  done
done

salt -C '* and not cfg01* and not mas01*' saltutil.sync_all
salt -C '* and not cfg01* and not mas01*' state.apply salt
wait_for "salt -C '* and not cfg01* and not mas01*' state.apply linux,ntp"
