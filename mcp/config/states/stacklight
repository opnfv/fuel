#!/bin/bash -e
##############################################################################
# Copyright (c) 2017 Mirantis Inc., Enea AB and others.
# All rights reserved. This program and the accompanying materials
# are made available under the terms of the Apache License, Version 2.0
# which accompanies this distribution, and is available at
# http://www.apache.org/licenses/LICENSE-2.0
##############################################################################


CI_DEBUG=${CI_DEBUG:-0}; [[ "${CI_DEBUG}" =~ (false|0) ]] || set -x

# Install the StackLight backends
#deploy elasticsearch
printf '\e[1;36m%-6s\e[m\n' "Deploy ELASTICSEARCH"
salt -C 'I@elasticsearch:server' state.sls elasticsearch.server -b 1
#deploy influxdb
printf '\e[1;36m%-6s\e[m\n' "Deploy INFLUXDB"
salt -C 'I@influxdb:server' state.sls influxdb -b 1
salt -C 'I@kibana:server' state.sls kibana.server -b 1
#deploy grafana server
printf '\e[1;36m%-6s\e[m\n' "Deploy GRAFANA server:"
salt -C 'I@grafana:server' state.sls grafana.server -b 1
#run grafana collector:
#printf '\e[1;36m%-6s\e[m\n' "Deploy GRAFANA collector"
#salt -C 'I@grafana:collector' state.sls grafana.collector
#salt -C 'I@grafana:collector' state.sls salt.minion.grains
#salt -C 'I@grafana:collector' saltutil.refresh_modules
#salt -C 'I@grafana:collector' mine.update
#perform grafana client config:
#printf '\e[1;36m%-6s\e[m\n' "Configure GRAFANA client"
#salt -C 'I@grafana:client' state.sls grafana.client -b 1
#deploy sensu
printf '\e[1;36m%-6s\e[m\n' "Deploy SENSU"
salt -C 'I@nagios:server' state.sls nagios.server
salt -C 'I@sensu:server and I@rabbitmq:server' state.sls rabbitmq
salt -C 'I@sensu:server and I@rabbitmq:server' cmd.run "rabbitmqctl cluster_status"
salt -C 'I@redis:cluster:role:master' state.sls redis
salt -C 'I@redis:server' state.sls redis
#salt -C 'I@sensu:server' state.sls sensu -b 1
salt -C 'I@sensu:client' state.sls sensu
#Configure the client to communicate with the server:
printf '\e[1;36m%-6s\e[m\n' "Configure the client to communicate with the server"
salt -C 'I@elasticsearch:client' state.sls elasticsearch.client.service
salt -C 'I@kibana:client' state.sls kibana.client.service
#restart minions on the nodes where clients are running
printf '\e[1;36m%-6s\e[m\n' "Restart minions on the nodes where clients are running"
salt -C 'I@kibana:client or I@elasticsearch:client' --async service.restart salt-minion
sleep 10
#configure server:
printf '\e[1;36m%-6s\e[m\n' "Configure server"
salt -C 'I@elasticsearch:client' state.sls elasticsearch.client
salt -C 'I@kibana:client' state.sls kibana.client
#StackLight SOIP (StackLight operational insights pipeline)
#restart minions
printf '\e[1;36m%-6s\e[m\n' "Restart minions"
salt '*' --async service.restart salt-minion; sleep 15
#clean salt mine
salt "*" mine.flush
#clean grains files
printf '\e[1;36m%-6s\e[m\n' "Clean grains files"
salt "*" file.remove /etc/salt/grains.d/collectd
salt "*" file.remove /etc/salt/grains.d/grafana
salt "*" file.remove /etc/salt/grains.d/heka
salt "*" file.remove /etc/salt/grains.d/sensu
salt "*" file.remove /etc/salt/grains
#install collectd and heka
printf '\e[1;36m%-6s\e[m\n' "Install collectd and heka"
salt "*" state.sls collectd -b 1
salt "*" state.sls heka -b 1
salt -C 'I@sensu:client' state.sls sensu
#Gather the Grafana metadata as grains
salt -C 'I@grafana:collector' state.sls grafana.collector
#Update salt mine
printf '\e[1;36m%-6s\e[m\n' "Update salt mine"
salt "*" state.sls salt.minion.grains -b 1
salt "*" saltutil.refresh_modules
salt "*" mine.update
seep 5
#Update heka
printf '\e[1;36m%-6s\e[m\n' "Update heka"
salt -C 'I@heka:aggregator:enabled:True or I@heka:remote_collector:enabled:True' state.sls heka -b 1
#Update collectd
printf '\e[1;36m%-6s\e[m\n' "Update collectd"
salt -C 'I@collectd:remote_client:enabled:True' state.sls collectd
#Update Nagios
salt -C 'I@nagios:server' state.sls nagios
# Stop the Nagios service because the package starts it by default and it will
# started later only on the node holding the VIP address
salt -C 'I@nagios:server' service.stop nagios3
#Update Sensu
pritf '\e[1;36m%-6s\e[m\n' "Update sensu"
salt -C 'I@sensu:server' state.sls sensu
# Finalize the configuration of Grafana (add the dashboards...)
salt -C 'I@grafana:client' state.sls grafana.client.service
salt -C 'I@grafana:client' --async service.restart salt-minion; sleep 10
salt -C 'I@grafana:client' state.sls grafana.client
#Retrieve StackLight monitoring VIP:
printf '\e[1;36m%-6s\e[m\n' "Get stacklight monitor VIP"
vip=$(salt-call pillar.data _param:stacklight_monitor_address --out key|grep _param: |awk '{print $2}')
vip=${vip:=172.16.10.253}
#restart services bounding to monitoring VIP
export vip=$vip
salt -G "ipv4:$vip" service.restart remote_collectd
salt -G "ipv4:$vip" service.restart remote_collector
salt -G "ipv4:$vip" service.restart aggregator
salt -G "ipv4:$vip" service.restart nagios3
