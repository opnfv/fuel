#!/bin/bash -e
##############################################################################
# Copyright (c) 2017 Mirantis Inc., Enea AB and others.
# All rights reserved. This program and the accompanying materials
# are made available under the terms of the Apache License, Version 2.0
# which accompanies this distribution, and is available at
# http://www.apache.org/licenses/LICENSE-2.0
##############################################################################

CI_DEBUG=${CI_DEBUG:-0}; [[ "${CI_DEBUG}" =~ (false|0) ]] || set -x

# shellcheck disable=SC1090
source "$(dirname "${BASH_SOURCE[0]}")/../../scripts/lib.sh"

wait_for 5.0 "salt -I 'keepalived:cluster' state.sls keepalived -b 1"
wait_for 5.0 "salt -I 'keepalived:cluster' pillar.get keepalived:cluster:instance:VIP:address"

wait_for 5.0 "salt -I 'rabbitmq:cluster:role:master' state.sls rabbitmq"
salt -I 'rabbitmq:cluster:role:slave' state.sls rabbitmq
salt -I 'rabbitmq:server' cmd.run "rabbitmqctl cluster_status"

salt -I 'glusterfs:server' state.sls glusterfs.server.service
salt -I 'glusterfs:server' state.sls glusterfs.server.setup -b 1
salt -I 'glusterfs:server' cmd.run "gluster peer status; gluster volume status" -b 1
salt -I 'glusterfs:client' state.sls glusterfs.client

salt -I 'galera:master' state.sls galera
salt -I 'galera:slave' state.sls galera -b 1
salt -I 'galera:master' mysql.status | grep -A1 wsrep_cluster_size

wait_for 3.0 "salt -I 'memcached:server' state.sls memcached"

salt -I 'haproxy:proxy' state.sls haproxy
salt -I 'haproxy:proxy' service.status haproxy
salt -I 'haproxy:proxy' service.restart rsyslog

salt -I 'keystone:server:role:primary' state.sls keystone.server
salt -I 'keystone:server:role:secondary' state.sls keystone.server
salt -I 'keystone:server' service.restart apache2

wait_for 30.0 "salt -I 'keystone:client' state.sls keystone.client"
salt -I 'keystone:server' cmd.run ". /root/keystonercv3; openstack service list"

salt -I 'glance:server:role:primary' state.sls glance
salt -I 'glance:server:role:secondary' state.sls glance
salt -I 'nova:controller:role:primary' state.sls nova
salt -I 'nova:controller:role:secondary' state.sls nova
salt -I 'heat:server:role:primary' state.sls heat
salt -I 'heat:server:role:secondary' state.sls heat

salt -I 'cinder:controller:role:primary' state.sls cinder
salt -I 'cinder:controller:role:secondary' state.sls cinder
wait_for 3.0 "salt -I 'cinder:volume' state.sls cinder"

salt -I 'neutron:server:role:primary' state.sls neutron
salt -I 'neutron:server:role:secondary' state.sls neutron
salt -I 'neutron:gateway' state.sls neutron.gateway
if salt 'cmp*' match.pillar 'neutron:compute:backend:engine:ovn' \
  --out yaml --static | grep -q -e 'true' ; then
  salt -I 'neutron:compute' state.sls neutron.compute
fi

salt -I 'nova:compute' state.sls nova,armband

salt -I 'barbican:server:role:primary' state.sls barbican
salt -I 'barbican:server:role:secondary' state.sls barbican
salt -I 'barbican:client' state.sls barbican

# remove config files coming from packages
for service in gnocchi panko; do
  salt -I "${service}:server" pkg.install ${service}-api
  salt -I "${service}:server" file.remove "/etc/apache2/sites-enabled/${service}-api.conf"
done

salt -I 'redis:cluster:role:master' state.sls redis
salt -I 'redis:server' state.sls redis
salt -I 'gnocchi:server:role:primary' state.sls gnocchi
salt -I 'gnocchi:server:role:secondary' state.sls gnocchi
salt -I 'panko:server:role:primary' state.sls panko
salt -I 'panko:server:role:secondary' state.sls panko
salt -I 'aodh:server:role:primary' state.sls aodh
salt -I 'aodh:server:role:secondary' state.sls aodh
salt -I 'ceilometer:server' state.sls ceilometer
salt -I 'ceilometer:agent' state.sls ceilometer

wait_for 3.0 "salt -I 'horizon:server' state.sls apache,horizon"
salt -I 'nginx:server' state.sls nginx

cluster_public_host=$(salt -C 'I@nginx:server and *01*' --out=yaml \
  pillar.get _param:cluster_public_host | awk '{print $2; exit}')
dashboard_host=$(salt -C 'I@nginx:server and *01*' --out=yaml cp.push \
  "/etc/ssl/certs/${cluster_public_host}-with-chain.crt" \
  upload_path='certs/os_cacert' | cut -d':' -f1)
cd /etc/ssl/certs && \
  ln -sf "/var/cache/salt/master/minions/${dashboard_host}/files/certs/os_cacert"
