#!/bin/bash -e
# shellcheck disable=SC2034
##############################################################################
# Copyright (c) 2018 Mirantis Inc., Enea AB and others.
# All rights reserved. This program and the accompanying materials
# are made available under the terms of the Apache License, Version 2.0
# which accompanies this distribution, and is available at
# http://www.apache.org/licenses/LICENSE-2.0
##############################################################################
#
# Data derived from XDF (PDF/IDF/SDF/etc), used as input in deploy.sh
#

{%- import 'net_map.j2' as nm with context -%}
{%- set arch = conf[conf.MCP_JUMP_ARCH] -%}
{%- set V = conf.virtual -%}
{%- set section_map = {
  'infra': -1,
  'control': nm.ctl01.idx,
  'compute': nm.cmp001.idx
} -%}

{%- macro bash_arr(_l) -%}
  ({%- for n in _l -%}'{{ n }}' {% endfor -%})
{%- endmacro -%}

{#- Pack list as `sep`-separated string, replacing spaces with '|' -#}
{%- macro pack(x = [], sep = ',') -%}
  {{ x | join(sep) | replace(' ', '|') }}
{%- endmacro -%}

{#- Pack all vnode data as string -#}
{%- macro serialize_vnodes() -%}
  {%- set arr = [] -%}
  {%- for section in section_map -%}
    {%- for n in V.nodes[section] -%}
      {%- if section_map[section] < 0 or conf.nodes[section_map[section] + loop.index0].node.type == 'virtual' -%}
        {%- if n not in V -%}{%- do V.update({n: {}}) -%}{%- endif -%}
        {%- do arr.append(pack([n, V[n].ram or arch.default.ram,
                                   V[n].vcpus or arch.default.vcpus])) -%}
      {%- endif -%}
    {%- endfor -%}
  {%- endfor -%}
  '{{ pack(arr, '|') }}'
{%- endmacro -%}

{#- Return a bash array of node names or a Salt query, optionally filtered by type #}
{%- macro filter_nodes(type, output_as_query = False, sections = section_map) -%}
  {%- set arr = [] -%}
  {%- for section in sections -%}
    {%- for n in V.nodes[section] -%}
      {%- if ( (section_map[section] < 0 and type == 'virtual') or
               (section_map[section] >= 0 and
                conf.nodes[section_map[section] + loop.index0].node.type in type) ) -%}
        {%- do arr.append(n) -%}
      {%- endif -%}
    {%- endfor -%}
  {%- endfor -%}
  {%- if output_as_query -%}
  '{{ arr | join('* or ') }}*'
  {%- else -%}
  {{ bash_arr(arr) }}
  {%- endif -%}
{%- endmacro -%}

{#- Pack apt_pkg data as string -#}
{%- macro serialize_apt_pkg() -%}
  {%- set arr = [] -%}
  {%- set sections = [arch.common] -%}
  {%- if conf.MCP_VCP -%}
    {%- do sections.append(arch.control) -%}
  {%- endif -%}
  {%- for c in sections -%}
    {%- do arr.append(pack([pack(c.apt['keys']), pack(c.apt.repos),
                            pack(c.pkg.install), pack(c.pkg.remove)], '^')) -%}
  {%- endfor -%}
  '{{ pack(arr, '^') }}'
{%- endmacro -%}

{%- set bridges = conf.idf.fuel.jumphost.bridges %}
# Determine bridge names based on IDF, where all bridges are now mandatory
OPNFV_BRIDGES=(
  '{{ bridges.admin or "pxebr" }}'
  '{{ bridges.mgmt or "mgmt" }}'
  '{{ bridges.private or "internal" }}'
  '{{ bridges.public or "public" }}'
)

export CLUSTER_DOMAIN={{ conf.cluster.domain }}
cluster_states={{ bash_arr(conf.cluster.states) }}
virtual_nodes={{ filter_nodes('virtual') }}
base_image={{ arch.base_image }}

# Serialize vnode data as '<name0>,<ram0>,<vcpu0>|<name1>,<ram1>,<vcpu1>[...]'
virtual_nodes_data={{ serialize_vnodes() }}

# Serialize repos, packages to (pre-)install/remove for:
# - foundation node VM base image (virtual: all VMs, baremetal: cfg01|mas01)
# - virtualized control plane VM base image (only when VCP is used)
virtual_repos_pkgs={{ serialize_apt_pkg() }}
